apiVersion: v1
kind: Service
metadata:
  labels:
    app: kafka
    release: kafka
  name: kafka-headless
spec:
  clusterIP: None
  ports:
  - name: kafka
    port: 9092
    targetPort: kafka
  selector:
    app: kafka
    release: kafka
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: zookeeper
    app.kubernetes.io/component: zookeeper
    app.kubernetes.io/instance: kafka
    release: kafka
  name: kafka-zookeeper-headless
spec:
  clusterIP: None
  ports:
  - name: client
    port: 2181
    targetPort: client
  - name: follower
    port: 2888
    targetPort: follower
  - name: election
    port: 3888
    targetPort: election
  selector:
    app: zookeeper
    app.kubernetes.io/component: zookeeper
    release: kafka
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: zookeeper
    app.kubernetes.io/component: zookeeper
    app.kubernetes.io/instance: kafka
    release: kafka
  name: kafka-zookeeper
spec:
  ports:
  - name: client
    port: 2181
    targetPort: client
  - name: follower
    port: 2888
    targetPort: follower
  - name: election
    port: 3888
    targetPort: election
  selector:
    app: zookeeper
    app.kubernetes.io/component: zookeeper
    release: kafka
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations: null
  labels:
    app: kafka
    release: kafka
  name: kafka
spec:
  ports:
  - name: kafka
    port: 9092
    targetPort: kafka
  selector:
    app: kafka
    release: kafka
  type: ClusterIP
---
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  labels:
    app: zookeeper
    app.kubernetes.io/component: zookeeper
    app.kubernetes.io/instance: kafka
    release: kafka
  name: kafka-zookeeper
spec:
  podManagementPolicy: Parallel
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
      app.kubernetes.io/component: zookeeper
      release: kafka
  serviceName: kafka-zookeeper-headless
  template:
    metadata:
      labels:
        app: zookeeper
        app.kubernetes.io/component: zookeeper
        app.kubernetes.io/instance: kafka
        chart: zookeeper-1.6.1
        heritage: Tiller
        release: kafka
      name: kafka-zookeeper
    spec:
      containers:
      - command:
        - bash
        - -ec
        - |
          # Execute entrypoint as usual after obtaining ZOO_SERVER_ID based on POD hostname
          HOSTNAME=`hostname -s`
          if [[ $HOSTNAME =~ (.*)-([0-9]+)$ ]]; then
            ORD=${BASH_REMATCH[2]}
            export ZOO_SERVER_ID=$((ORD+1))
          else
            echo "Failed to get index from hostname $HOST"
            exit 1
          fi
          . /opt/bitnami/base/functions
          . /opt/bitnami/base/helpers
          print_welcome_page
          . /init.sh
          nami_initialize zookeeper
          exec tini -- /run.sh
        env:
        - name: ZOO_PORT_NUMBER
          value: "2181"
        - name: ZOO_TICK_TIME
          value: "2000"
        - name: ZOO_INIT_LIMIT
          value: "10"
        - name: ZOO_SYNC_LIMIT
          value: "5"
        - name: ZOO_MAX_CLIENT_CNXNS
          value: "60"
        - name: ZOO_SERVERS
          value: kafka-zookeeper-0.kafka-zookeeper-headless.default.svc.cluster.local:2888:3888
        - name: ZOO_HEAP_SIZE
          value: "1024"
        - name: ALLOW_ANONYMOUS_LOGIN
          value: "yes"
        image: docker.io/bitnami/zookeeper:3.4.14
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 6
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: client
          timeoutSeconds: 5
        name: kafka-zookeeper
        ports:
        - containerPort: 2181
          name: client
        - containerPort: 2888
          name: follower
        - containerPort: 3888
          name: election
        readinessProbe:
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: client
          timeoutSeconds: 5
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
        volumeMounts:
        - mountPath: /bitnami/zookeeper
          name: data
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      volumes: []
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      annotations: null
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 8Gi
---
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  labels:
    app: kafka
    release: kafka
  name: kafka
spec:
  podManagementPolicy: Parallel
  replicas: 1
  selector:
    matchLabels:
      app: kafka
      chart: kafka-1.10.1
      heritage: Tiller
      release: kafka
  serviceName: kafka-headless
  template:
    metadata:
      labels:
        app: kafka
        chart: kafka-1.10.1
        heritage: Tiller
        release: kafka
      name: kafka
    spec:
      containers:
      - env:
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: kafka-zookeeper
        - name: KAFKA_PORT_NUMBER
          value: "9092"
        - name: KAFKA_LISTENERS
          value: PLAINTEXT://:$(KAFKA_PORT_NUMBER)
        - name: KAFKA_ADVERTISED_LISTENERS
          value: PLAINTEXT://$(MY_POD_NAME).kafka-headless.default.svc.cluster.local:$(KAFKA_PORT_NUMBER)
        - name: ALLOW_PLAINTEXT_LISTENER
          value: "yes"
        - name: KAFKA_BROKER_ID
          value: "-1"
        - name: KAFKA_DELETE_TOPIC_ENABLE
          value: "false"
        - name: KAFKA_HEAP_OPTS
          value: -Xmx1024m -Xms1024m
        - name: KAFKA_LOG_FLUSH_INTERVAL_MESSAGES
          value: "10000"
        - name: KAFKA_LOG_FLUSH_INTERVAL_MS
          value: "1000"
        - name: KAFKA_LOG_RETENTION_BYTES
          value: "1073741824"
        - name: KAFKA_LOG_RETENTION_CHECK_INTERVALS_MS
          value: "300000"
        - name: KAFKA_LOG_RETENTION_HOURS
          value: "168"
        - name: KAFKA_LOG_MESSAGE_FORMAT_VERSION
          value: ""
        - name: KAFKA_MAX_MESSAGE_BYTES
          value: "1000012"
        - name: KAFKA_SEGMENT_BYTES
          value: "1073741824"
        - name: KAFKA_LOGS_DIRS
          value: /opt/bitnami/kafka/data
        - name: KAFKA_DEFAULT_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM
          value: https
        - name: KAFKA_TRANSACTION_STATE_LOG_MIN_ISR
          value: "1"
        - name: KAFKA_NUM_IO_THREADS
          value: "8"
        - name: KAFKA_NUM_NETWORK_THREADS
          value: "3"
        - name: KAFKA_NUM_PARTITIONS
          value: "1"
        - name: KAFKA_NUM_RECOVERY_THREADS_PER_DATA_DIR
          value: "1"
        - name: KAFKA_SOCKET_RECEIVE_BUFFER_BYTES
          value: "102400"
        - name: KAFKA_SOCKET_REQUEST_MAX_BYTES
          value: "104857600"
        - name: KAFKA_SOCKET_SEND_BUFFER_BYTES
          value: "102400"
        - name: KAFKA_ZOOKEEPER_CONNECT_TIMEOUT_MS
          value: "6000"
        image: docker.io/bitnami/kafka:2.2.0
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 2
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: kafka
          timeoutSeconds: 5
        name: kafka
        ports:
        - containerPort: 9092
          name: kafka
        readinessProbe:
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: kafka
          timeoutSeconds: 5
        resources: null
        volumeMounts:
        - mountPath: /bitnami/kafka
          name: data
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      volumes: []
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      annotations: null
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 8Gi
